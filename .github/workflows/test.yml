name: test
on:
  push:
    paths-ignore:
        - shuffler/auxiliary/**
        - shuffler/logic/**
jobs:
  lint-type-check:
    name: Lint and type check code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'

      - name: Upgrade pip
        run: pip install --upgrade pip --user

      - name: Run tox
        run: |
          pip install tox
          tox

  tests:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'

      - name: Upgrade pip
        run: pip install --upgrade pip --user

      - name: Run tests
        run: |
          pip install tox
          tox -e test

  generate-base-patch:
    name: Run patching toolchain and create base patch
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'

      - name: Upgrade pip
        run: pip install --upgrade pip --user

      - name: Fetch PH rom
        run: |
          pip install gdown
          gdown ${{ secrets.PH_GOOGLE_DRIVE_ID }}
        working-directory: base

      - name: Get filename of rom
        id: rom-filename
        shell: bash
        run: |
          echo "::set-output name=filename::$(ls *.nds)"
        working-directory: base

      - name: Get current commit hash
        id: commit-hash
        run: echo "::set-output name=hash::$(git rev-parse --short HEAD)"

      - name: Set up Docker Buildx
        id: buildx        
        uses: docker/setup-buildx-action@v1

      - name: Build Docker
        uses: docker/build-push-action@v2
        with:
          context: base/
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            PH_ROM_PATH=${{ steps.rom-filename.outputs.filename }}
            VERSION_STRING=${{ steps.commit-hash.outputs.hash }}
          outputs: |
            base/out

      - name: Clone Flips repo
        uses: actions/checkout@v3
        with:
          repository: Alcaro/Flips
          path: base/Flips

      - name: Get latest commit hash from Flips repo
        id: flips-hash
        shell: bash
        run: |
          echo "::set-output name=flips_hash::$(git rev-parse --short HEAD)"
        working-directory: base/Flips

      - name: Cache Flips executable
        uses: actions/cache@v2
        id: flips-cache
        env:
          cache-name: cache-flips
        with:
          path: base/Flips/*
          key: ${{ env.cache-name }}-${{ steps.flips-hash.outputs.flips_hash }}-${{ runner.os }}

      - name: Compile Flips tool
        if: steps.flips-cache.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update && sudo apt-get install g++ build-essential
          chmod +x ./make.sh
          ./make.sh
        working-directory: base/Flips

      - name: Create patch
        run: |
          chmod +x ./Flips/flips
          ./Flips/flips --create $(ls *.nds) out/out.nds patch.bps
        working-directory: base

      - uses: actions/upload-artifact@v3
        with:
          name: patch.bps
          path: base/patch.bps

      - name: Cleanup
        if: always()
        run: rm -rf *.nds

  test-desmume:
    name: Apply base patch and run py-desmume integration tests
    needs: generate-base-patch
    # Windows is used to run the desmume-based tests because py-desmume has issues running on headless ubuntu
    runs-on: windows-latest
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: patch.bps

      - name: Set up MinGW
        uses: egor-tensin/setup-mingw@v2
        with:
          platform: x64

      - name: Clone Flips repo
        uses: actions/checkout@v3
        with:
          repository: Alcaro/Flips
          path: Flips

      - name: Get latest commit hash from Flips repo
        id: flips-hash
        run: |
          echo "::set-output name=flips_hash::$(git rev-parse --short HEAD)"
        working-directory: Flips

      - name: Cache Flips executable
        uses: actions/cache@v2
        id: flips-cache
        env:
          cache-name: cache-flips
        with:
          path: Flips/*
          key: ${{ env.cache-name }}-${{ steps.flips-hash.outputs.flips_hash }}-${{ runner.os }}

      - name: Compile Flips tool
        if: steps.flips-cache.outputs.cache-hit != 'true'
        run: |
          mingw32-make CFLAGS=-O2
        working-directory: Flips

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'

      - name: Upgrade pip
        run: pip install --upgrade pip --user

      - name: Fetch PH rom
        run: |
          pip install gdown
          gdown ${{ secrets.PH_GOOGLE_DRIVE_ID }}

      - name: Patch the rom
        run: |
          ./Flips/flips.exe --apply patch.bps $(ls *.nds) out.nds

      - name: Run tests
        run: |
          pip install tox
          PY_DESMUME_BATTERY_DIR="$pythonLocation" tox -e test-desmume
        env:
          PH_ROM_PATH: out.nds

      - name: Cleanup
        if: always()
        run: rm -rf *.nds
