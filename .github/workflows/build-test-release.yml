name: build-test-release
on:
  push:
jobs:
  lint-type-check:
    name: Lint and type check code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'

      - name: Upgrade pip
        run: pip install --upgrade pip

      - name: Run tox
        run: |
          pip install tox
          tox

  tests:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'

      - name: Upgrade pip
        run: pip install --upgrade pip

      - name: Run tests
        run: |
          pip install tox
          tox -e test

  check-logic:
    name: Validate logic
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Run basic syntax check
      - name: Get the CI tool
        uses: robinraju/release-downloader@v1
        with:
          repository: Ibot02/tmcr-newlogic-ci
          tag: "v1.0"
          filename: "tmcr-newlogic-ci"
          tarBall: false
          zipBall: false

      - name: Make it executable
        run: chmod +x "$GITHUB_WORKSPACE/tmcr-newlogic-ci"

      - name: Run the CI tool
        run: |
          shopt -s globstar
          for file in **/*.logic; do
            ./tmcr-newlogic-ci "$file"
          done;

      # Run more advanced checks
      - name: Checkout rando-shuffler repo
        uses: actions/checkout@v3
        with:
          repository: minishmaker/rando-shuffler
          path: rando-shuffler

      - name: Get cache key
        id: shuffler-cache-key
        run: echo "::set-output name=key::$(git rev-parse HEAD)"
        shell: bash
        working-directory: rando-shuffler

      - uses: actions/cache@v3
        id: rando-shuffler-cache
        with:
          path: rando-shuffler
          key: ${{ steps.shuffler-cache-key.outputs.key }}

      - name: Compile rando-shuffler
        if: steps.rando-shuffler-cache.outputs.cache-hit != 'true'
        run: cargo build
        working-directory: rando-shuffler
        env:
          CARGO_TERM_COLOR: always

      - name: Make it executable
        run: chmod +x rando-shuffler/target/debug/rando_shuffler

      - name: Run the shuffler
        run: |
          shopt -s globstar
          find rando-shuffler/ -name "*.logic" -type f -delete # remove test files
          file_count=0
          failed=0;
          for file in **/*.logic; do
            echo "$file... ";
            status=0
            rando-shuffler/target/debug/rando_shuffler "$file" || status=1
            if [[ $status != 0 ]]; then
              failed=$((failed + 1));
            else
              echo " PASSED";
            fi
            echo "-------------------------------"
            echo ""
            file_count=$((file_count + 1))
          done;
          echo "RESULTS: $((file_count - failed)) / $file_count passed"
          if [[ $failed != 0 ]]; then
            exit 1;
          fi

  check-aux-data:
    name: Validate aux data
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'

      - name: Upgrade pip
        run: pip install --upgrade pip

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Check if there are changes to pydantic models that aren't reflected in JSON schema
        run: |
          python shuffler/aux_models.py
          git diff --exit-code
          if [ $? -ne 0 ] 
          then
            exit 1
          fi

      - name: Validate aux data
        uses: walbo/validate-json@v1.1.0
        with:
          files: shuffler/auxiliary/**/*.json


  generate-base-patch:
    name: Run patching toolchain and create base patch
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'

      - name: Upgrade pip
        run: pip install --upgrade pip

      - name: Fetch PH rom
        run: |
          pip install gdown
          gdown ${{ secrets.PH_GOOGLE_DRIVE_ID }}
        working-directory: base

      - name: Get filename of rom
        id: rom-filename
        shell: bash
        run: |
          echo "::set-output name=filename::$(ls *.nds)"
        working-directory: base

      - name: Get current commit hash
        id: commit-hash
        run: echo "::set-output name=hash::$(git rev-parse --short HEAD)"

      - name: Set up Docker Buildx
        id: buildx        
        uses: docker/setup-buildx-action@v2

      - name: Build base patch
        uses: docker/build-push-action@v3
        with:
          context: base/
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            PH_ROM_PATH=${{ steps.rom-filename.outputs.filename }}
            VERSION_STRING=${{ steps.commit-hash.outputs.hash }}
          outputs: |
            base/out

      - uses: actions/upload-artifact@v3
        with:
          name: patch.bps
          path: base/out/patch.bps

      - name: Cleanup
        if: always()
        run: rm -rf *.nds

  test-desmume:
    # NOTE: This job is only run when one or more files in the base/ directory are modified,
    # OR when a tag is pushed (i.e. when a new release is cut). The `if` statements on each
    # step check for this.
    name: Run py-desmume tests against base-patched ROM if `base/` directory has changed
    needs: generate-base-patch
    # Windows is used to run the desmume-based tests because py-desmume has issues running on headless ubuntu
    runs-on: windows-latest
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v3
        with:
            # Also retrieve previous commit so we can check if there are relevant changes
            fetch-depth: 2

      # Check what files changed in the last commit. This info is used in every other step in this
      # to determine whether to run the base patch tests (they are only run when files in the base/
      # directory or the tests themselves are modified).
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v21

      - uses: actions/download-artifact@v3
        if: "startsWith(github.ref, 'refs/tags/') || contains(steps.changed-files.outputs.modified_files, 'base/') || contains(steps.changed-files.outputs.modified_files, 'test_desmume.py')"
        with:
          name: patch.bps

      - name: Set up MinGW
        if: "startsWith(github.ref, 'refs/tags/') || contains(steps.changed-files.outputs.modified_files, 'base/') || contains(steps.changed-files.outputs.modified_files, 'test_desmume.py')"
        uses: egor-tensin/setup-mingw@v2
        with:
          platform: x64

      - name: Clone Flips repo
        if: "startsWith(github.ref, 'refs/tags/') || contains(steps.changed-files.outputs.modified_files, 'base/') || contains(steps.changed-files.outputs.modified_files, 'test_desmume.py')"
        uses: actions/checkout@v3
        with:
          repository: Alcaro/Flips
          path: Flips

      - name: Get latest commit hash from Flips repo
        if: "startsWith(github.ref, 'refs/tags/') || contains(steps.changed-files.outputs.modified_files, 'base/') || contains(steps.changed-files.outputs.modified_files, 'test_desmume.py')"
        id: flips-hash
        run: |
          echo "::set-output name=flips_hash::$(git rev-parse --short HEAD)"
        working-directory: Flips

      - name: Cache Flips executable
        if: "startsWith(github.ref, 'refs/tags/') || contains(steps.changed-files.outputs.modified_files, 'base/') || contains(steps.changed-files.outputs.modified_files, 'test_desmume.py')"
        uses: actions/cache@v3
        id: flips-cache
        env:
          cache-name: cache-flips
        with:
          path: Flips/*
          key: ${{ env.cache-name }}-${{ steps.flips-hash.outputs.flips_hash }}-${{ runner.os }}

      - name: Compile Flips tool
        if: "startsWith(github.ref, 'refs/tags/') || contains(steps.changed-files.outputs.modified_files, 'base/') || contains(steps.changed-files.outputs.modified_files, 'test_desmume.py')"
        run: |
          mingw32-make CFLAGS=-O2
        working-directory: Flips

      - name: Set up Python
        if: "startsWith(github.ref, 'refs/tags/') || contains(steps.changed-files.outputs.modified_files, 'base/') || contains(steps.changed-files.outputs.modified_files, 'test_desmume.py')"
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'

      - name: Upgrade pip
        if: "startsWith(github.ref, 'refs/tags/') || contains(steps.changed-files.outputs.modified_files, 'base/') || contains(steps.changed-files.outputs.modified_files, 'test_desmume.py')"
        run: pip install --upgrade pip

      - name: Fetch PH rom
        if: "startsWith(github.ref, 'refs/tags/') || contains(steps.changed-files.outputs.modified_files, 'base/') || contains(steps.changed-files.outputs.modified_files, 'test_desmume.py')"
        run: |
          pip install gdown
          gdown ${{ secrets.PH_GOOGLE_DRIVE_ID }}

      - name: Patch the rom
        if: "startsWith(github.ref, 'refs/tags/') || contains(steps.changed-files.outputs.modified_files, 'base/') || contains(steps.changed-files.outputs.modified_files, 'test_desmume.py')"
        run: |
          ./Flips/flips.exe --apply patch.bps $(ls *.nds) out.nds

      - name: Run tests
        if: "startsWith(github.ref, 'refs/tags/') || contains(steps.changed-files.outputs.modified_files, 'base/') || contains(steps.changed-files.outputs.modified_files, 'test_desmume.py')"
        run: |
          pip install tox
          PY_DESMUME_BATTERY_DIR="$pythonLocation" tox -e test-desmume
        env:
          PH_ROM_PATH: out.nds

      - name: Cleanup
        if: "startsWith(github.ref, 'refs/tags/') || contains(steps.changed-files.outputs.modified_files, 'base/') || contains(steps.changed-files.outputs.modified_files, 'test_desmume.py')"
        run: rm -rf *.nds

  build:
    name: Build randomizer
    needs:
      - generate-base-patch
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'

      - name: Upgrade pip
        run: pip install --upgrade pip

      - name: Install randomizer dependencies
        run: pip install -r requirements.txt

      - name: Install pyinstaller
        run: pip install -U pyinstaller

      - name: Download base patch
        uses: actions/download-artifact@v3
        with:
          name: patch.bps
          path: base/out/patch.bps

      - name: Build randomizer executable
        run: pyinstaller randomizer.spec

      - name: Get current commit hash
        id: commit-hash
        run: echo "::set-output name=hash::$(git rev-parse --short HEAD)"

      - uses: actions/upload-artifact@v3
        with:
          name: ph-randomizer_${{ steps.commit-hash.outputs.hash }}_${{ matrix.os }}
          path: dist/

  release:
    name: Publish a release
    # Require all tests to pass before a release is possible
    needs: 
      - build
      - lint-type-check
      - tests
      - check-logic
      - check-aux-data
      - test-desmume
    # Only create a release if a tag was pushed
    if: "startsWith(github.ref, 'refs/tags/')"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Get current commit hash
        id: commit-hash
        run: echo "::set-output name=hash::$(git rev-parse --short HEAD)"

      - name: Get version string
        id: version-string
        run: echo "::set-output name=version::$(git describe --tags)"

      - name: Download built executables
        uses: actions/download-artifact@v3

      - name: Replace commit hash with version string
        run: |
          mv ph-randomizer_${{ steps.commit-hash.outputs.hash }}_ubuntu-latest ph-randomizer_${{ steps.version-string.outputs.version }}_ubuntu-latest
          mv ph-randomizer_${{ steps.commit-hash.outputs.hash }}_macos-latest ph-randomizer_${{ steps.version-string.outputs.version }}_macos-latest
          mv ph-randomizer_${{ steps.commit-hash.outputs.hash }}_windows-latest ph-randomizer_${{ steps.version-string.outputs.version }}_windows-latest

      - name: Zip up executables
        run: |
          zip -r ph-randomizer_${{ steps.version-string.outputs.version }}_ubuntu-latest.zip ph-randomizer_${{ steps.version-string.outputs.version }}_ubuntu-latest
          zip -r ph-randomizer_${{ steps.version-string.outputs.version }}_macos-latest.zip ph-randomizer_${{ steps.version-string.outputs.version }}_macos-latest
          zip -r ph-randomizer_${{ steps.version-string.outputs.version }}_windows-latest.zip ph-randomizer_${{ steps.version-string.outputs.version }}_windows-latest

      - name: Create a GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ph-randomizer_${{ steps.version-string.outputs.version }}_ubuntu-latest.zip
            ph-randomizer_${{ steps.version-string.outputs.version }}_macos-latest.zip
            ph-randomizer_${{ steps.version-string.outputs.version }}_windows-latest.zip
